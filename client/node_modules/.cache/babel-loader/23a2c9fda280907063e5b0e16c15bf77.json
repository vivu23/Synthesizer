{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\n\nexport var Subtract = /*#__PURE__*/function (_Signal) {\n  _inherits(Subtract, _Signal);\n\n  function Subtract() {\n    var _this;\n\n    _classCallCheck(this, Subtract);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Subtract).call(this, Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"]))));\n    _this.override = false;\n    _this.name = \"Subtract\";\n    /**\n     * the summing node\n     */\n\n    _this._sum = new Gain({\n      context: _this.context\n    });\n    _this.input = _this._sum;\n    _this.output = _this._sum;\n    /**\n     * Negate the input of the second input before connecting it to the summing node.\n     */\n\n    _this._neg = new Negate({\n      context: _this.context\n    });\n    /**\n     * The value which is subtracted from the main signal\n     */\n\n    _this.subtrahend = _this._param;\n    connectSeries(_this._constantSource, _this._neg, _this._sum);\n    return _this;\n  }\n\n  _createClass(Subtract, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Subtract.prototype), \"dispose\", this).call(this);\n\n      this._neg.dispose();\n\n      this._sum.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        value: 0\n      });\n    }\n  }]);\n\n  return Subtract;\n}(Signal);","map":null,"metadata":{},"sourceType":"module"}