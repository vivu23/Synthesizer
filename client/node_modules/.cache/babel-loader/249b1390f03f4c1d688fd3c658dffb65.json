{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\n\nexport var Negate = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(Negate, _SignalOperator);\n\n  function Negate() {\n    var _this;\n\n    _classCallCheck(this, Negate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Negate).apply(this, arguments));\n    _this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n\n    _this._multiply = new Multiply({\n      context: _this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n\n    _this.input = _this._multiply;\n    _this.output = _this._multiply;\n    return _this;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n\n\n  _createClass(Negate, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Negate.prototype), \"dispose\", this).call(this);\n\n      this._multiply.dispose();\n\n      return this;\n    }\n  }]);\n\n  return Negate;\n}(SignalOperator);","map":null,"metadata":{},"sourceType":"module"}