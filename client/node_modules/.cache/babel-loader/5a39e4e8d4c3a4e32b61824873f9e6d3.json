{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope } from \"../component/envelope/FrequencyEnvelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * const synth = new Tone.MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nexport var MonoSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(MonoSynth, _Monophonic);\n\n  function MonoSynth() {\n    var _this;\n\n    _classCallCheck(this, MonoSynth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MonoSynth).call(this, optionsFromArguments(MonoSynth.getDefaults(), arguments)));\n    _this.name = \"MonoSynth\";\n    var options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n    _this.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n      context: _this.context,\n      detune: options.detune,\n      onstop: function onstop() {\n        return _this.onsilence(_assertThisInitialized(_assertThisInitialized(_this)));\n      }\n    }));\n    _this.frequency = _this.oscillator.frequency;\n    _this.detune = _this.oscillator.detune;\n    _this.filter = new Filter(Object.assign(options.filter, {\n      context: _this.context\n    }));\n    _this.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, {\n      context: _this.context\n    }));\n    _this.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, {\n      context: _this.context\n    })); // connect the oscillators to the output\n\n    _this.oscillator.chain(_this.filter, _this.envelope, _this.output); // connect the filter envelope\n\n\n    _this.filterEnvelope.connect(_this.filter.frequency);\n\n    readOnly(_assertThisInitialized(_assertThisInitialized(_this)), [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n    return _this;\n  }\n\n  _createClass(MonoSynth, [{\n    key: \"_triggerEnvelopeAttack\",\n\n    /**\n     * start the attack portion of the envelope\n     * @param time the time the attack should start\n     * @param velocity the velocity of the note (0-1)\n     */\n    value: function _triggerEnvelopeAttack(time) {\n      var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.envelope.triggerAttack(time, velocity);\n      this.filterEnvelope.triggerAttack(time);\n      this.oscillator.start(time);\n\n      if (this.envelope.sustain === 0) {\n        var computedAttack = this.toSeconds(this.envelope.attack);\n        var computedDecay = this.toSeconds(this.envelope.decay);\n        this.oscillator.stop(time + computedAttack + computedDecay);\n      }\n    }\n    /**\n     * start the release portion of the envelope\n     * @param time the time the release should start\n     */\n\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      this.envelope.triggerRelease(time);\n      this.filterEnvelope.triggerRelease(time);\n      this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MonoSynth.prototype), \"dispose\", this).call(this);\n\n      this.oscillator.dispose();\n      this.envelope.dispose();\n      this.filterEnvelope.dispose();\n      this.filter.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Monophonic.getDefaults(), {\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.005,\n          decay: 0.1,\n          release: 1,\n          sustain: 0.9\n        }),\n        filter: Object.assign(omitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          Q: 1,\n          rolloff: -12,\n          type: \"lowpass\"\n        }),\n        filterEnvelope: Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.6,\n          baseFrequency: 200,\n          decay: 0.2,\n          exponent: 2,\n          octaves: 3,\n          release: 2,\n          sustain: 0.5\n        }),\n        oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())), {\n          type: \"sawtooth\"\n        })\n      });\n    }\n  }]);\n\n  return MonoSynth;\n}(Monophonic);","map":null,"metadata":{},"sourceType":"module"}