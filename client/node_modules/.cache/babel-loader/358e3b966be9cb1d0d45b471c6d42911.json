{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nexport var Tremolo = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Tremolo, _StereoEffect);\n\n  function Tremolo() {\n    var _this;\n\n    _classCallCheck(this, Tremolo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tremolo).call(this, optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"])));\n    _this.name = \"Tremolo\";\n    var options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._amplitudeL = new Gain({\n      context: _this.context\n    });\n    _this._amplitudeR = new Gain({\n      context: _this.context\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    _this.depth = new Signal({\n      context: _this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(_assertThisInitialized(_assertThisInitialized(_this)), [\"frequency\", \"depth\"]);\n\n    _this.connectEffectLeft(_this._amplitudeL);\n\n    _this.connectEffectRight(_this._amplitudeR);\n\n    _this._lfoL.connect(_this._amplitudeL.gain);\n\n    _this._lfoR.connect(_this._amplitudeR.gain);\n\n    _this.frequency.fan(_this._lfoL.frequency, _this._lfoR.frequency);\n\n    _this.depth.fan(_this._lfoR.amplitude, _this._lfoL.amplitude);\n\n    _this.spread = options.spread;\n    return _this;\n  }\n\n  _createClass(Tremolo, [{\n    key: \"start\",\n\n    /**\n     * Start the tremolo.\n     */\n    value: function start(time) {\n      this._lfoL.start(time);\n\n      this._lfoR.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the tremolo.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfoL.stop(time);\n\n      this._lfoR.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the effect to the transport.\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfoL.sync();\n\n      this._lfoR.sync();\n\n      this.context.transport.syncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfoL.unsync();\n\n      this._lfoR.unsync();\n\n      this.context.transport.unsyncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * The oscillator type.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Tremolo.prototype), \"dispose\", this).call(this);\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._amplitudeL.dispose();\n\n      this._amplitudeR.dispose();\n\n      this.frequency.dispose();\n      this.depth.dispose();\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfoL.type;\n    },\n    set: function set(type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._lfoR.phase - this._lfoL.phase; // 180\n    },\n    set: function set(spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 10,\n        type: \"sine\",\n        depth: 0.5,\n        spread: 180\n      });\n    }\n  }]);\n\n  return Tremolo;\n}(StereoEffect);","map":null,"metadata":{},"sourceType":"module"}