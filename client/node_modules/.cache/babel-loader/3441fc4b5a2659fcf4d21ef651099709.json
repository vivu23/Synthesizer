{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nvar DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport var createOfflineAudioContextConstructor = function createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, _startRendering) {\n  return /*#__PURE__*/function (_baseAudioContextCons) {\n    _inherits(OfflineAudioContext, _baseAudioContextCons);\n\n    function OfflineAudioContext(a, b, c) {\n      var _this;\n\n      _classCallCheck(this, OfflineAudioContext);\n\n      var options;\n\n      if (typeof a === 'number' && b !== undefined && c !== undefined) {\n        options = {\n          length: b,\n          numberOfChannels: a,\n          sampleRate: c\n        };\n      } else if (typeof a === 'object') {\n        options = a;\n      } else {\n        throw new Error('The given parameters are not valid.');\n      }\n\n      var _DEFAULT_OPTIONS$opti = _objectSpread({}, DEFAULT_OPTIONS, options),\n          length = _DEFAULT_OPTIONS$opti.length,\n          numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n          sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n\n      var nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, function () {\n        return testPromiseSupport(nativeOfflineAudioContext);\n      })) {\n        nativeOfflineAudioContext.addEventListener('statechange', function () {\n          var i = 0;\n\n          var delayStateChangeEvent = function delayStateChangeEvent(event) {\n            if (_this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                _this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        }());\n      }\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(OfflineAudioContext).call(this, nativeOfflineAudioContext, numberOfChannels));\n      _this._length = length;\n      _this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      _this._state = null;\n      return _this;\n    }\n\n    _createClass(OfflineAudioContext, [{\n      key: \"startRendering\",\n      value: function startRendering() {\n        var _this2 = this;\n\n        /*\n         * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n         * the state of the nativeOfflineAudioContext might no transition to running immediately.\n         */\n        if (this._state === 'running') {\n          return Promise.reject(createInvalidStateError());\n        }\n\n        this._state = 'running';\n        return _startRendering(this.destination, this._nativeOfflineAudioContext).finally(function () {\n          _this2._state = null;\n          deactivateAudioGraph(_this2);\n        });\n      }\n    }, {\n      key: \"_waitForThePromiseToSettle\",\n      value: function _waitForThePromiseToSettle(event) {\n        var _this3 = this;\n\n        if (this._state === null) {\n          this._nativeOfflineAudioContext.dispatchEvent(event);\n        } else {\n          setTimeout(function () {\n            return _this3._waitForThePromiseToSettle(event);\n          });\n        }\n      }\n    }, {\n      key: \"length\",\n      get: function get() {\n        // Bug #17: Safari does not yet expose the length.\n        if (this._nativeOfflineAudioContext.length === undefined) {\n          return this._length;\n        }\n\n        return this._nativeOfflineAudioContext.length;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n      }\n    }]);\n\n    return OfflineAudioContext;\n  }(baseAudioContextConstructor);\n};","map":null,"metadata":{},"sourceType":"module"}