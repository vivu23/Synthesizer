{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\n\nexport var MultibandCompressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandCompressor, _ToneAudioNode);\n\n  function MultibandCompressor() {\n    var _this;\n\n    _classCallCheck(this, MultibandCompressor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultibandCompressor).call(this, Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments))));\n    _this.name = \"MultibandCompressor\";\n    var options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n    _this._splitter = _this.input = new MultibandSplit({\n      context: _this.context,\n      lowFrequency: options.lowFrequency,\n      highFrequency: options.highFrequency\n    });\n    _this.lowFrequency = _this._splitter.lowFrequency;\n    _this.highFrequency = _this._splitter.highFrequency;\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this.low = new Compressor(Object.assign(options.low, {\n      context: _this.context\n    }));\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.high = new Compressor(Object.assign(options.high, {\n      context: _this.context\n    })); // connect the compressor\n\n    _this._splitter.low.chain(_this.low, _this.output);\n\n    _this._splitter.mid.chain(_this.mid, _this.output);\n\n    _this._splitter.high.chain(_this.high, _this.output);\n\n    readOnly(_assertThisInitialized(_assertThisInitialized(_this)), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  _createClass(MultibandCompressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MultibandCompressor.prototype), \"dispose\", this).call(this);\n\n      this._splitter.dispose();\n\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.output.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        lowFrequency: 250,\n        highFrequency: 2000,\n        low: {\n          ratio: 6,\n          threshold: -30,\n          release: 0.25,\n          attack: 0.03,\n          knee: 10\n        },\n        mid: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        },\n        high: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        }\n      });\n    }\n  }]);\n\n  return MultibandCompressor;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}