{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nexport var Convolver = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Convolver, _ToneAudioNode);\n\n  function Convolver() {\n    var _this;\n\n    _classCallCheck(this, Convolver);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Convolver).call(this, optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"])));\n    _this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    _this._convolver = _this.context.createConvolver();\n    var options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer(options.url, function (buffer) {\n      _this.buffer = buffer;\n      options.onload();\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (_this._buffer.loaded) {\n      _this.buffer = _this._buffer;\n    } // initially set normalization\n\n\n    _this.normalize = options.normalize; // connect it up\n\n    _this.input.chain(_this._convolver, _this.output);\n\n    return _this;\n  }\n\n  _createClass(Convolver, [{\n    key: \"load\",\n\n    /**\n     * Load an impulse response url as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     */\n    value: function load(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._buffer.load(url);\n\n              case 2:\n                this.buffer = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * The convolver's buffer\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Convolver.prototype), \"dispose\", this).call(this);\n\n      this._buffer.dispose();\n\n      this._convolver.disconnect();\n\n      return this;\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      if (this._buffer.length) {\n        return this._buffer;\n      } else {\n        return null;\n      }\n    },\n    set: function set(buffer) {\n      if (buffer) {\n        this._buffer.set(buffer);\n      } // if it's already got a buffer, create a new one\n\n\n      if (this._convolver.buffer) {\n        // disconnect the old one\n        this.input.disconnect();\n\n        this._convolver.disconnect(); // create and connect a new one\n\n\n        this._convolver = this.context.createConvolver();\n        this.input.chain(this._convolver, this.output);\n      }\n\n      var buff = this._buffer.get();\n\n      this._convolver.buffer = buff ? buff : null;\n    }\n    /**\n     * The normalize property of the ConvolverNode interface is a boolean that\n     * controls whether the impulse response from the buffer will be scaled by\n     * an equal-power normalization when the buffer attribute is set, or not.\n     */\n\n  }, {\n    key: \"normalize\",\n    get: function get() {\n      return this._convolver.normalize;\n    },\n    set: function set(norm) {\n      this._convolver.normalize = norm;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        normalize: true,\n        onload: noOp\n      });\n    }\n  }]);\n\n  return Convolver;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}