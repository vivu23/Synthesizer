{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\n\nexport var Distortion = /*#__PURE__*/function (_Effect) {\n  _inherits(Distortion, _Effect);\n\n  function Distortion() {\n    var _this;\n\n    _classCallCheck(this, Distortion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Distortion).call(this, optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"])));\n    _this.name = \"Distortion\";\n    var options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._distortion = options.distortion;\n\n    _this.connectEffect(_this._shaper);\n\n    _this.distortion = options.distortion;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n\n  _createClass(Distortion, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Distortion.prototype), \"dispose\", this).call(this);\n\n      this._shaper.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"distortion\",\n\n    /**\n     * The amount of distortion. Nominal range is between 0 and 1.\n     */\n    get: function get() {\n      return this._distortion;\n    },\n    set: function set(amount) {\n      this._distortion = amount;\n      var k = amount * 100;\n      var deg = Math.PI / 180;\n\n      this._shaper.setMap(function (x) {\n        if (Math.abs(x) < 0.001) {\n          // should output 0 when input is 0\n          return 0;\n        } else {\n          return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n        }\n      });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n\n  }, {\n    key: \"oversample\",\n    get: function get() {\n      return this._shaper.oversample;\n    },\n    set: function set(oversampling) {\n      this._shaper.oversample = oversampling;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        distortion: 0.4,\n        oversample: \"none\"\n      });\n    }\n  }]);\n\n  return Distortion;\n}(Effect);","map":null,"metadata":{},"sourceType":"module"}