{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\n\nexport var FrequencyEnvelope = /*#__PURE__*/function (_Envelope) {\n  _inherits(FrequencyEnvelope, _Envelope);\n\n  function FrequencyEnvelope() {\n    var _this;\n\n    _classCallCheck(this, FrequencyEnvelope);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FrequencyEnvelope).call(this, optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"])));\n    _this.name = \"FrequencyEnvelope\";\n    var options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    _this._octaves = options.octaves;\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._exponent = _this.input = new Pow({\n      context: _this.context,\n      value: options.exponent\n    });\n    _this._scale = _this.output = new Scale({\n      context: _this.context,\n      min: _this._baseFrequency,\n      max: _this._baseFrequency * Math.pow(2, _this._octaves)\n    });\n\n    _this._sig.chain(_this._exponent, _this._scale);\n\n    return _this;\n  }\n\n  _createClass(FrequencyEnvelope, [{\n    key: \"dispose\",\n\n    /**\n     * Clean up\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(FrequencyEnvelope.prototype), \"dispose\", this).call(this);\n\n      this._exponent.dispose();\n\n      this._scale.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"baseFrequency\",\n\n    /**\n     * The envelope's minimum output value. This is the value which it\n     * starts at.\n     */\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(min) {\n      var freq = this.toFrequency(min);\n      assertRange(freq, 0);\n      this._baseFrequency = freq;\n      this._scale.min = this._baseFrequency; // update the max value when the min changes\n\n      this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the baseFrequency that the\n     * envelope will scale to.\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n      this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n    }\n    /**\n     * The envelope's exponent value.\n     */\n\n  }, {\n    key: \"exponent\",\n    get: function get() {\n      return this._exponent.value;\n    },\n    set: function set(exponent) {\n      this._exponent.value = exponent;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Envelope.getDefaults(), {\n        baseFrequency: 200,\n        exponent: 1,\n        octaves: 4\n      });\n    }\n  }]);\n\n  return FrequencyEnvelope;\n}(Envelope);","map":null,"metadata":{},"sourceType":"module"}