{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\n\nexport var Mono = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Mono, _ToneAudioNode);\n\n  function Mono() {\n    var _this;\n\n    _classCallCheck(this, Mono);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mono).call(this, optionsFromArguments(Mono.getDefaults(), arguments)));\n    _this.name = \"Mono\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._merge = _this.output = new Merge({\n      channels: 2,\n      context: _this.context\n    });\n\n    _this.input.connect(_this._merge, 0, 0);\n\n    _this.input.connect(_this._merge, 0, 1);\n\n    return _this;\n  }\n\n  _createClass(Mono, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Mono.prototype), \"dispose\", this).call(this);\n\n      this._merge.dispose();\n\n      this.input.dispose();\n      return this;\n    }\n  }]);\n\n  return Mono;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}