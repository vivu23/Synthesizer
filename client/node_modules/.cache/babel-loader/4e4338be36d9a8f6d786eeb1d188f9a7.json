{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport var PulseOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(PulseOscillator, _Source);\n\n  function PulseOscillator() {\n    var _this;\n\n    _classCallCheck(this, PulseOscillator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PulseOscillator).call(this, optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"])));\n    _this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n\n    _this._widthGate = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n\n    _this._thresh = new WaveShaper({\n      context: _this.context,\n      mapping: function mapping(val) {\n        return val <= 0 ? -1 : 1;\n      }\n    });\n    var options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    _this.width = new Signal({\n      context: _this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    _this._triangle = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_assertThisInitialized(_this)));\n      },\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    _this.frequency = _this._triangle.frequency;\n    _this.detune = _this._triangle.detune; // connections\n\n    _this._triangle.chain(_this._thresh, _this.output);\n\n    _this.width.chain(_this._widthGate, _this._thresh);\n\n    readOnly(_assertThisInitialized(_assertThisInitialized(_this)), [\"width\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(PulseOscillator, [{\n    key: \"_start\",\n\n    /**\n     * start the oscillator\n     */\n    value: function _start(time) {\n      time = this.toSeconds(time);\n\n      this._triangle.start(time);\n\n      this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n\n      this._triangle.stop(time); // the width is still connected to the output.\n      // that needs to be stopped also\n\n\n      this._widthGate.gain.cancelScheduledValues(time);\n\n      this._widthGate.gain.setValueAtTime(0, time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._triangle.restart(time);\n\n      this._widthGate.gain.cancelScheduledValues(time);\n\n      this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up method.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PulseOscillator.prototype), \"dispose\", this).call(this);\n\n      this._triangle.dispose();\n\n      this.width.dispose();\n\n      this._widthGate.dispose();\n\n      this._thresh.dispose();\n\n      return this;\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._triangle.phase;\n    },\n    set: function set(phase) {\n      this._triangle.phase = phase;\n    }\n    /**\n     * The type of the oscillator. Always returns \"pulse\".\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"pulse\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pulse\".\n     */\n\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return \"pulse\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return 0;\n    }\n    /**\n     * *Internal use* The carrier oscillator type is fed through the\n     * waveshaper node to create the pulse. Using different carrier oscillators\n     * changes oscillator's behavior.\n     */\n\n  }, {\n    key: \"carrierType\",\n    set: function set(type) {\n      this._triangle.type = type;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        phase: 0,\n        type: \"pulse\",\n        width: 0.2\n      });\n    }\n  }]);\n\n  return PulseOscillator;\n}(Source);","map":null,"metadata":{},"sourceType":"module"}