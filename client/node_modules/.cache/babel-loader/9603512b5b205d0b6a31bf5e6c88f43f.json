{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\thuyv\\\\Desktop\\\\Work\\\\UTSA\\\\Senior Design\\\\Synthesizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\n\nexport var MultibandSplit = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandSplit, _ToneAudioNode);\n\n  function MultibandSplit() {\n    var _this;\n\n    _classCallCheck(this, MultibandSplit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultibandSplit).call(this, optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"])));\n    _this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n\n    _this.output = undefined;\n    /**\n     * The low band.\n     */\n\n    _this.low = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n\n    _this._lowMidFilter = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n\n    _this.mid = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n\n    _this.high = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    _this._internalChannels = [_this.low, _this.mid, _this.high];\n    var options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    _this.lowFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    _this.highFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n\n    _this.input.fan(_this.low, _this.high);\n\n    _this.input.chain(_this._lowMidFilter, _this.mid); // the frequency control signal\n\n\n    _this.lowFrequency.fan(_this.low.frequency, _this._lowMidFilter.frequency);\n\n    _this.highFrequency.fan(_this.mid.frequency, _this.high.frequency); // the Q value\n\n\n    _this.Q.connect(_this.low.Q);\n\n    _this.Q.connect(_this._lowMidFilter.Q);\n\n    _this.Q.connect(_this.mid.Q);\n\n    _this.Q.connect(_this.high.Q);\n\n    readOnly(_assertThisInitialized(_assertThisInitialized(_this)), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  _createClass(MultibandSplit, [{\n    key: \"dispose\",\n\n    /**\n     * Clean up.\n     */\n    value: function dispose() {\n      _get(_getPrototypeOf(MultibandSplit.prototype), \"dispose\", this).call(this);\n\n      writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n      this.low.dispose();\n\n      this._lowMidFilter.dispose();\n\n      this.mid.dispose();\n      this.high.dispose();\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        highFrequency: 2500,\n        lowFrequency: 400\n      });\n    }\n  }]);\n\n  return MultibandSplit;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}